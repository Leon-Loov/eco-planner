// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

enum RoadmapType {
  NATIONAL
  REGIONAL
  MUNICIPAL
  LOCAL
  OTHER
}

// Meta roadmaps are used for the highest level of roadmaps and reference multiple versions of the same roadmap
model MetaRoadmap {
  // UUID of the meta roadmap
  id          String   @id @default(uuid())
  // Timestamp of when meta roadmap was created
  createdAt   DateTime @default(now()) @map("created_at")
  // Timestamp of when meta roadmap was last updated
  updatedAt   DateTime @updatedAt @map("updated_at")
  // Name of meta roadmap, usually same as the name of the roadmap
  name        String
  // Description of meta roadmap
  description String   @db.Text

  // The different versions of the roadmap this meta roadmap references
  roadmapVersions Roadmap[] @relation("parent_meta_roadmap")

  // Roadmaps referencing this meta roadmap
  roadmaps Roadmap[] @relation("meta_roadmap")

  // Comments related to this meta roadmap
  comments Comment[] @relation("meta_roadmap_comment")
  // Links related to this meta roadmap
  links    Link[]    @relation("meta_roadmap_link")

  // Author of this meta roadmap
  authorId   String      @map("author_id")
  author     User        @relation("meta_roadmap_author", fields: [authorId], references: [id])
  // Specific users who are allowed to edit this meta roadmap
  editors    User[]      @relation("meta_roadmap_editors")
  // Groups of users who are allowed to edit this meta roadmap
  editGroups UserGroup[] @relation("meta_roadmap_edit_groups")
  // Specific users who are allowed to view this meta roadmap
  viewers    User[]      @relation("meta_roadmap_viewers")
  // Groups of users who are allowed to view this meta roadmap
  viewGroups UserGroup[] @relation("meta_roadmap_view_groups")

  @@map("meta_roadmap")
}

model Roadmap {
  // UUID of the roadmap
  id          String      @id @default(uuid())
  // Timestamp of when roadmap was created
  createdAt   DateTime    @default(now()) @map("created_at")
  // Timestamp of when roadmap was last updated
  updatedAt   DateTime    @updatedAt @map("updated_at")
  // Name of roadmap
  name        String
  // Optional description of roadmap
  description String?     @db.Text
  // The type of roadmap, for example national, regional, or local
  type        RoadmapType @default(OTHER)

  // The county the roadmap targets (if local)
  county       String? @map("county")
  // The municipality the roadmap targets (if local)
  municipality String? @map("municipality")

  // Parent meta roadmap
  // This is the meta roadmap that this roadmap is a version of (if any)
  parentMetaRoadmapId String?      @map("parent_meta_roadmap_id")
  parentMetaRoadmap   MetaRoadmap? @relation("parent_meta_roadmap", fields: [parentMetaRoadmapId], references: [id], onDelete: Cascade)
  // The version of the roadmap, ONLY USED FOR META ROADMAPS
  version             Int?         @default(1)

  // Parent roadmap
  parentRoadmapId    String?      @map("parent_roadmap_id")
  parentRoadmap      Roadmap?     @relation("roadmap_parent", fields: [parentRoadmapId], references: [id], onDelete: SetNull)
  // Child roadmaps
  childRoadmaps      Roadmap[]    @relation("roadmap_parent")
  // Any meta roadmap this roadmap refers to (without being a version of it)
  // For example, a roadmap for a county might refer to a national meta roadmap
  metaRoadmapId      String?      @map("meta_roadmap_id")
  metaRoadmap        MetaRoadmap? @relation("meta_roadmap", fields: [metaRoadmapId], references: [id], onDelete: SetNull)
  // Specific version of the meta roadmap this roadmap refers to (if any)
  // If NULL, zero/negative, or larger than the number of versions, use the latest version
  metaRoadmapVersion Int?         @map("meta_roadmap_version")

  // Comments related to this roadmap
  comments   Comment[]   @relation("roadmap_comment")
  // Goals related to this roadmap
  goals      Goal[]      @relation("roadmap_goal")
  // Author of this roadmap
  authorId   String      @map("author_id")
  author     User        @relation("roadmap_author", fields: [authorId], references: [id])
  // Specific users who are allowed to edit this roadmap
  editors    User[]      @relation("roadmap_editors")
  // Groups of users who are allowed to edit this roadmap
  editGroups UserGroup[] @relation("roadmap_edit_groups")
  // Specific users who are allowed to view this roadmap
  viewers    User[]      @relation("roadmap_viewers")
  // Groups of users who are allowed to view this roadmap
  viewGroups UserGroup[] @relation("roadmap_view_groups")

  @@map("roadmap")
}

model Goal {
  // UUID of the goal
  id        String   @id @default(uuid())
  // Timestamp of when goal was created
  createdAt DateTime @default(now()) @map("created_at")
  // Timestamp of when goal was last updated
  updatedAt DateTime @updatedAt @map("updated_at")

  // Name of goal
  // If no name is given, show indicator parameter instead
  name               String?
  // Longer description of goal
  description        String? @db.Text
  // The ID of the national roadmap this goal is related to
  nationalRoadmapId  String? @map("national_roadmap_id")
  // The ID of the national goal this goal is related to
  nationalGoalId     String? @map("national_goal_id")
  // Will be something similar to "Key\Energiomvandlingsanläggningar\Insatta bränslen för elproduktion\Naturgas", as defined by LEAP
  indicatorParameter String  @map("indicator_parameter") @db.Text

  // A series of datapoints for the goal
  dataSeries DataSeries? @relation("data_series")
  // Links related to this goal
  links      Link[]      @relation("goal_link")
  // Comments related to this goal
  comments   Comment[]   @relation("goal_comment")
  // The person who created this goal (implicitly allowed to edit)
  authorId   String      @map("author_id")
  author     User        @relation("goal_author", fields: [authorId], references: [id])
  // Specific users who are allowed to edit this goal
  editors    User[]      @relation("goal_editors")
  // Groups of users who are allowed to edit this goal
  editGroups UserGroup[] @relation("goal_edit_groups")
  // Specific users who are allowed to view this goal
  viewers    User[]      @relation("goal_viewers")
  // Groups of users who are allowed to view this goal
  viewGroups UserGroup[] @relation("goal_view_groups")
  // Child Actions
  actions    Action[]    @relation("action_goal")
  // Parent Roadmap
  roadmapId  String      @map("roadmap_id")
  roadmap    Roadmap     @relation("roadmap_goal", fields: [roadmapId], references: [id], onDelete: Cascade)

  @@map("goal")
}

model DataSeries {
  // UUID of the data series
  id        String   @id @default(uuid())
  // Timestamp of when data series was created
  createdAt DateTime @default(now()) @map("created_at")
  // Timestamp of when data series was last updated
  updatedAt DateTime @updatedAt @map("updated_at")

  // Unit used for the yearly fields
  unit    String
  // An optional scale for the data series, for example % or thousands
  scale   String?
  // Following is a series values for each year from 2020 to 2050
  // These are the goals for each year
  val2020 Float?  @map("val_2020")
  val2021 Float?  @map("val_2021")
  val2022 Float?  @map("val_2022")
  val2023 Float?  @map("val_2023")
  val2024 Float?  @map("val_2024")
  val2025 Float?  @map("val_2025")
  val2026 Float?  @map("val_2026")
  val2027 Float?  @map("val_2027")
  val2028 Float?  @map("val_2028")
  val2029 Float?  @map("val_2029")
  val2030 Float?  @map("val_2030")
  val2031 Float?  @map("val_2031")
  val2032 Float?  @map("val_2032")
  val2033 Float?  @map("val_2033")
  val2034 Float?  @map("val_2034")
  val2035 Float?  @map("val_2035")
  val2036 Float?  @map("val_2036")
  val2037 Float?  @map("val_2037")
  val2038 Float?  @map("val_2038")
  val2039 Float?  @map("val_2039")
  val2040 Float?  @map("val_2040")
  val2041 Float?  @map("val_2041")
  val2042 Float?  @map("val_2042")
  val2043 Float?  @map("val_2043")
  val2044 Float?  @map("val_2044")
  val2045 Float?  @map("val_2045")
  val2046 Float?  @map("val_2046")
  val2047 Float?  @map("val_2047")
  val2048 Float?  @map("val_2048")
  val2049 Float?  @map("val_2049")
  val2050 Float?  @map("val_2050")

  // Related goal
  goalId     String      @unique @map("goal_id")
  goal       Goal        @relation("data_series", fields: [goalId], references: [id], onDelete: Cascade)
  // Author of the data series
  authorId   String      @map("author_id")
  author     User        @relation("data_series_author", fields: [authorId], references: [id])
  // Users allowed to edit the data series
  editors    User[]      @relation("data_series_editors")
  // Users allowed to view the data series
  viewers    User[]      @relation("data_series_viewers")
  // User groups allowed to edit the data series
  editGroups UserGroup[] @relation("data_series_edit_groups")
  // User groups allowed to view the data series
  viewGroups UserGroup[] @relation("data_series_view_groups")

  @@map("data_series")
}

model Action {
  // UUID of the action
  id        String   @id @default(uuid())
  // Timestamp of when action was created
  createdAt DateTime @default(now()) @map("created_at")
  // Timestamp of when action was last updated
  updatedAt DateTime @updatedAt @map("updated_at")

  // Name of action, preferably a short summary
  name            String
  // Longer description of action
  description     String? @db.Text
  // The year the action is planned to start
  startYear       Int?    @map("start_year")
  // The year the action is planned to end
  endYear         Int?    @map("end_year")
  // Cost efficiency, dunno what more to say, it's a text field
  costEfficiency  String? @map("cost_efficiency") @db.Text
  // Expected outcome, describe what you expect to happen
  expectedOutcome String? @map("expected_outcome") @db.Text
  // The person responsible for the action
  // ONLY show to the author, because of GDPR
  projectManager  String? @map("project_manager")
  // Currently a text field, but might change to a many-to-many relationship with an actor table instead
  // Might be an organisation, group, company, region, etc.
  // relevantActors actor[]
  relevantActors  String? @map("relevant_actors") @db.Text

  // Different types of actions
  // Sufficiency generally means reducing consumption
  isSufficiency Boolean @default(false) @map("is_sufficiency")
  // Efficiency generally means increasing efficiency
  isEfficiency  Boolean @default(false) @map("is_efficiency")
  // Renewables generally means increasing the use of renewables
  isRenewables  Boolean @default(false) @map("is_renewables")

  // Notes related to this action
  notes      Note[]      @relation("action_notes")
  // Links related to this action
  links      Link[]      @relation("action_link")
  // Comments related to this action
  comments   Comment[]   @relation("action_comment")
  // Parent Goal
  goalId     String      @map("goal_id")
  goal       Goal        @relation("action_goal", fields: [goalId], references: [id], onDelete: Cascade)
  // The person who created this action (implicitly allowed to edit)
  authorId   String      @map("author_id")
  author     User        @relation("action_author", fields: [authorId], references: [id])
  // Specific users who are allowed to edit this action
  editors    User[]      @relation("action_editors")
  // Groups of users who are allowed to edit this action
  editGroups UserGroup[] @relation("action_edit_groups")
  // Specific users who are allowed to view this action
  viewers    User[]      @relation("action_viewers")
  // Groups of users who are allowed to view this action
  viewGroups UserGroup[] @relation("action_view_groups")

  @@map("action")
}

// This should have been called "Note", but I guess I misnamed it. Don't want to change it now though.
model Note {
  // UUID of the note
  id        String   @id @default(uuid())
  // Timestamp of when note was created
  createdAt DateTime @default(now()) @map("created_at")
  // Timestamp of when note was last updated
  updatedAt DateTime @updatedAt @map("updated_at")

  // The note itself
  note     String @db.Text
  // The action this note is related to
  actionId String @map("action_id")
  action   Action @relation("action_notes", fields: [actionId], references: [id], onDelete: Cascade)
  // The user who created this note
  authorId String @map("author_id")
  author   User   @relation("note_author", fields: [authorId], references: [id])

  @@map("note")
}

// Links are used to link to external resources, such as websites, documents, etc.
// They are a separate model to easily allow for multiple links to be added to a single action/goal
model Link {
  // UUID of the link
  id          String  @id @default(uuid())
  // URL of the link
  url         String
  // Description of the link
  description String?

  // A link should be related to either an action, a goal, XOR a meta roadmap; if multiple, create separate links
  // Has to be enforced through custom SQL migration, as Prisma does not support this
  // https://github.com/prisma/prisma/discussions/21214
  // For MariaDB, see: https://mariadb.com/kb/en/constraint/#check-constraints
  // Any action this link is related to
  actionId      String?      @map("action_id")
  action        Action?      @relation("action_link", fields: [actionId], references: [id], onDelete: Cascade)
  // Any goal this link is related to
  goalId        String?      @map("goal_id")
  goal          Goal?        @relation("goal_link", fields: [goalId], references: [id], onDelete: Cascade)
  // Any meta roadmap this link is related to
  metaRoadmapId String?      @map("meta_roadmap_id")
  metaRoadmap   MetaRoadmap? @relation("meta_roadmap_link", fields: [metaRoadmapId], references: [id], onDelete: Cascade)

  @@map("link")
}

// There is apparently a default typesript interface called "Comment", so make sure to properly import this type in the code
model Comment {
  // UUID of the comment
  id        String   @id @default(uuid())
  // Timestamp of when comment was created
  createdAt DateTime @default(now()) @map("created_at")
  // Timestamp of when comment was last updated
  updatedAt DateTime @updatedAt @map("updated_at")

  // The comment itself
  commentText String @map("comment_text") @db.Text

  // The user who created this comment
  authorId      String       @map("author_id")
  author        User         @relation("comment_author", fields: [authorId], references: [id])
  // A comment should be related to either an action, a goal, a roadmap, XOR a meta roadmap.
  // Has to be enforced through custom SQL migration, as Prisma does not support this
  // https://github.com/prisma/prisma/discussions/21214
  // For MariaDB, see: https://mariadb.com/kb/en/constraint/#check-constraints
  // Any action this comment is related to
  actionId      String?      @map("action_id")
  action        Action?      @relation("action_comment", fields: [actionId], references: [id], onDelete: Cascade)
  // Any goal this comment is related to
  goalId        String?      @map("goal_id")
  goal          Goal?        @relation("goal_comment", fields: [goalId], references: [id], onDelete: Cascade)
  // Any roadmap this comment is related to
  roadmapId     String?      @map("roadmap_id")
  roadmap       Roadmap?     @relation("roadmap_comment", fields: [roadmapId], references: [id], onDelete: Cascade)
  // Any meta roadmap this comment is related to
  metaRoadmapId String?      @map("meta_roadmap_id")
  metaRoadmap   MetaRoadmap? @relation("meta_roadmap_comment", fields: [metaRoadmapId], references: [id], onDelete: Cascade)

  @@map("comment")
}

model User {
  // UUID of the user
  id String @id @default(uuid())

  // Username of the user
  username String  @unique
  // Email of the user
  email    String  @unique
  // User's password in hashed form
  // In this implementation, the password is hashed using bcrypt
  password String
  // Whether or not the user is an admin
  isAdmin  Boolean @default(false) @map("is_admin")

  // Actions the user created
  authoredActions      Action[]      @relation("action_author")
  // Goals the user created
  authoredGoals        Goal[]        @relation("goal_author")
  // Roadmaps the user created
  authoredRoadmaps     Roadmap[]     @relation("roadmap_author")
  // Meta roadmaps the user created
  authoredMetaRoadmaps MetaRoadmap[] @relation("meta_roadmap_author")
  // Data series the user created
  authoredData         DataSeries[]  @relation("data_series_author")
  // Notes the user created
  authoredNotes        Note[]        @relation("note_author")
  // Comments the user created
  authoredComments     Comment[]     @relation("comment_author")
  // Actions the user is explicitly allowed to edit
  editActions          Action[]      @relation("action_editors")
  // Actions the user is explicitly allowed to view
  viewActions          Action[]      @relation("action_viewers")
  // Goals the user is explicitly allowed to edit
  editGoals            Goal[]        @relation("goal_editors")
  // Goals the user is explicitly allowed to view
  viewGoals            Goal[]        @relation("goal_viewers")
  // Roadmaps the user is explicitly allowed to edit
  editRoadmaps         Roadmap[]     @relation("roadmap_editors")
  // Roadmaps the user is explicitly allowed to view
  viewRoadmaps         Roadmap[]     @relation("roadmap_viewers")
  // Meta roadmaps the user is explicitly allowed to edit
  editMetaRoadmaps     MetaRoadmap[] @relation("meta_roadmap_editors")
  // Meta roadmaps the user is explicitly allowed to view
  viewMetaRoadmaps     MetaRoadmap[] @relation("meta_roadmap_viewers")
  // Data series the user is explicitly allowed to edit
  editData             DataSeries[]  @relation("data_series_editors")
  // Data series the user is explicitly allowed to view
  viewData             DataSeries[]  @relation("data_series_viewers")
  // Groups the user is a member of
  userGroups           UserGroup[]   @relation("user_group")

  @@map("user")
}

// There should be a default user group that all users are a member of, in addition to user-defined groups
// The default group should be used when a user wants to make their goal/action/roadmap/data series public
// There should also be a restriction in place to prevent giving edit permissions to the default group
model UserGroup {
  // UUID of the user group
  id   String @id @default(uuid())
  // Name of the user group
  name String @unique

  // Users in the group
  users           User[]        @relation("user_group")
  // Actions all users in the group are allowed to edit
  editActions     Action[]      @relation("action_edit_groups")
  // Actions all users in the group are allowed to view
  viewActions     Action[]      @relation("action_view_groups")
  // Goals all users in the group are allowed to edit
  editGoals       Goal[]        @relation("goal_edit_groups")
  // Goals all users in the group are allowed to view
  viewGoals       Goal[]        @relation("goal_view_groups")
  // Roadmaps all users in the group are allowed to edit
  editRoadmap     Roadmap[]     @relation("roadmap_edit_groups")
  // Roadmaps all users in the group are allowed to view
  viewRoadmap     Roadmap[]     @relation("roadmap_view_groups")
  // Meta roadmaps all users in the group are allowed to edit
  editMetaRoadmap MetaRoadmap[] @relation("meta_roadmap_edit_groups")
  // Meta roadmaps all users in the group are allowed to view
  viewMetaRoadmap MetaRoadmap[] @relation("meta_roadmap_view_groups")
  // Data series all users in the group are allowed to edit
  editData        DataSeries[]  @relation("data_series_edit_groups")
  // Data series all users in the group are allowed to view
  viewData        DataSeries[]  @relation("data_series_view_groups")

  @@map("user_group")
}

// model Organization {
//   // UUID of the organization
//   id        String   @id @default(uuid())
//   // Timestamp of when organization was created
//   createdAt DateTime @default(now()) @map("created_at")
//   // Timestamp of when organization was last updated
//   updatedAt DateTime @updatedAt @map("updated_at")

//   // Name of the organization
//   name String @unique
//   // Organization number
//   orgNumber String @map("org_number") @unique
//   // NUTS 2021 code for the organization's county, equivelent to NUTS level 3
//   // For example, SE110 for Stockholms län or SE121 for Uppsala län
//   nutsCode String @map("nuts_code")
// }
